# SecureTranscribe Docker Compose Configuration
# Provides both development and production setups

version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')}
        VERSION: ${VERSION:-1.0.0}
    container_name: securetranscribe-app
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./securetranscribe.db}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=0.0.0.0
      - PORT=8000
      - UPLOAD_DIR=/app/uploads
      - PROCESSED_DIR=/app/processed
      - USE_GPU=${USE_GPU:-false}
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE:-base}
      - PYANNOTE_MODEL=${PYANNOTE_MODEL:-pyannote/speaker-diarization-3.1}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - QUEUE_SIZE=${QUEUE_SIZE:-10}
      - CLEANUP_DELAY=${CLEANUP_DELAY:-3600}
    volumes:
      - ./uploads:/app/uploads
      - ./processed:/app/processed
      - ./logs:/app/logs
      - securetranscribe-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - securetranscribe-network

  # GPU-enabled variant (comment out if not using GPU)
  app-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')}
        VERSION: ${VERSION:-1.0.0}
    container_name: securetranscribe-app-gpu
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./securetranscribe.db}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=0.0.0.0
      - PORT=8000
      - UPLOAD_DIR=/app/uploads
      - PROCESSED_DIR=/app/processed
      - USE_GPU=true
      - CUDA_VISIBLE_DEVICES=0
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE:-base}
      - PYANNOTE_MODEL=${PYANNOTE_MODEL:-pyannote/speaker-diarization-3.1}
      - MAX_WORKERS=${MAX_WORKERS:-2}
      - QUEUE_SIZE=${QUEUE_SIZE:-10}
    volumes:
      - ./uploads:/app/uploads
      - ./processed:/app/processed
      - ./logs:/app/logs
      - securetranscribe-data:/app/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - securetranscribe-network
    profiles:
      - gpu

  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: securetranscribe-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-securetranscribe}
      - POSTGRES_USER=${POSTGRES_USER:-securetranscribe}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-securepassword}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-securetranscribe} -d ${POSTGRES_DB:-securetranscribe}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - securetranscribe-network
    profiles:
      - database

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: securetranscribe-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - securetranscribe-network
    profiles:
      - cache

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: securetranscribe-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - securetranscribe-network
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: securetranscribe-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - securetranscribe-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: securetranscribe-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - securetranscribe-network
    profiles:
      - monitoring

# Networks
networks:
  securetranscribe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  securetranscribe-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Development override
# Usage: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
# Create docker-compose.override.yml with:
# version: '3.8'
# services:
#   app:
#     environment:
#       - DEBUG=true
#       - LOG_LEVEL=DEBUG
#       - RELOAD=true
#     command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
#     volumes:
#       - .:/app:delegated
#       - ./uploads:/app/uploads
#       - ./processed:/app/processed
#       - ./logs:/app/logs
